---
- hosts: jenkins
  become: yes
  vars:
    jenkins_url: http://localhost:8080
    jenkins_username: admin 
    jenkins_password: admin
    sonarScannerName: sonar
    
    
  tasks:
    - name: Configure Maven
      vars:
        maven_version: 3.6.3
        maven_config: |
          import hudson.model.*;
          import jenkins.model.*;
          import hudson.tools.*;
          import hudson.tasks.Maven.MavenInstaller;
          import hudson.tasks.Maven.MavenInstallation;

          def maven_version = env['MAVEN_VERSION']
          def maven_version_list = maven_version.split(',')

          // Constants
          def instance = Jenkins.getInstance()

          Thread.start {
              sleep 10000

              // Maven
              println "--> Configuring Maven"
              def desc_MavenTool = instance.getDescriptor("hudson.tasks.Maven")
              def maven_installations = desc_MavenTool.getInstallations()

              maven_version_list.eachWithIndex { version, index ->
                  def mavenInstaller = new MavenInstaller(version)
                  def installSourceProperty = new InstallSourceProperty([mavenInstaller])

                  def name="Maven_" + version

                  // This makes the solution backwards-compatible, and will treat the first version in the array as "ADOP Maven"
                  if (index == 0)
                  {
                      name="Maven"
                  }

                  def maven_inst = new MavenInstallation(
                    name, // Name
                    "", // Home
                    [installSourceProperty]
                  )

                  // Only add a Maven installation if it does not already exist - do not overwrite existing config

                  def maven_inst_exists = false
                  maven_installations.each {
                    installation = (MavenInstallation) it
                      if ( maven_inst.getName() ==  installation.getName() ) {
                              maven_inst_exists = true
                              println("Found existing installation: " + installation.getName())
                      }
                  }

                  if (!maven_inst_exists) {
                      maven_installations += maven_inst
                  }
              }

              desc_MavenTool.setInstallations((MavenInstallation[]) maven_installations)
              desc_MavenTool.save()

              // Save the state
              instance.save()
          }
      jenkins_script:
        script: "{{ maven_config }}"
        url: "{{ jenkins_url }}"
        url_username: "{{ jenkins_username }}"
        url_password: "{{ jenkins_password }}"
       
