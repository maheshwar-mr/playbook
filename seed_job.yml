---
- hosts: new_jenkins
  become: true
  vars:
    jenkins_url: http://localhost:8080
    jenkins_username: admin
    jenkins_password: admin
    jenkins_jobName: seed
    jenkins_gitPath: https://github.com/maheshwar807/job_dsl
    jenkins_groovyPath: pipeline_job/demo.groovy
    job_script: |
      import hudson.model.FreeStyleProject;
      import hudson.plugins.git.GitSCM;
      import hudson.plugins.git.BranchSpec;
      import javaposse.jobdsl.plugin.ExecuteDslScripts;
      import javaposse.jobdsl.plugin.RemovedJobAction;
      import hudson.model.*;
      jenkins = Jenkins.instance;
      jobName = "{{ jenkins_jobName }}"

      dslBuilder = new ExecuteDslScripts();
      dslBuilder.setTargets("{{ jenkins_groovyPath }}");
      dslBuilder.setScriptText("");
      dslBuilder.setUseScriptText(false);
      dslBuilder.setIgnoreExisting(false);
      dslBuilder.setFailOnSeedCollision(true);
      dslBuilder.setRemovedJobAction(RemovedJobAction.DISABLE);

      dslProject = new hudson.model.FreeStyleProject(jenkins, jobName);
      dslProject.scm = new GitSCM("{{ jenkins_gitPath }}");
      dslProject.scm.branches = [new BranchSpec("*/master")];
      dslProject.createTransientActions();
      dslProject.getPublishersList().add(dslBuilder);
      jenkins.add(dslProject, jobName);
      def job = hudson.model.Hudson.instance.getJob("{{ jenkins_jobName }}");
      hudson.model.Hudson.instance.queue.schedule(job);
           
  tasks:
    - name: Create new DSL Job
      jenkins_script:
        script: "{{ job_script }}"
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_username }}"
        password: "{{ jenkins_password }}"
        
    - name: Waiting for seed job to be created
      pause:
        seconds: 15
        
    - name: Disable Script Approval
      vars:
        disable_script_approval:  |
          import javaposse.jobdsl.plugin.GlobalJobDslSecurityConfiguration
          import jenkins.model.GlobalConfiguration
          
          GlobalConfiguration.all().get(GlobalJobDslSecurityConfiguration.class).useScriptSecurity=false
          GlobalConfiguration.all().get(GlobalJobDslSecurityConfiguration.class).save()
      jenkins_script:
        script: "{{ disable_script_approval }}"
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_username }}"
        password: "{{ jenkins_password }}"
        
    - name: Queue Pipeline Job
      vars:
        pipelineJob_name: Springboot_demo
        queue_script: |
          def job = hudson.model.Hudson.instance.getJob("{{ pipelineJob_name }}");
          hudson.model.Hudson.instance.instance.queue.schedule(job);
      jenkins_script:
        script: "{{ queue_script }}"
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_username }}"
        password: "{{ jenkins_password }}"
    
    - name: Waiting for Pipeline Job to start building
      pause:
        seconds: 15
    
    - name: Enable Script Approval
      vars:
        enable_script_approval:  |
          import javaposse.jobdsl.plugin.GlobalJobDslSecurityConfiguration
          import jenkins.model.GlobalConfiguration
          
          GlobalConfiguration.all().get(GlobalJobDslSecurityConfiguration.class).useScriptSecurity=true
          GlobalConfiguration.all().get(GlobalJobDslSecurityConfiguration.class).save()
      jenkins_script:
        script: "{{ enable_script_approval }}"
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_username }}"
        password: "{{ jenkins_password }}"
